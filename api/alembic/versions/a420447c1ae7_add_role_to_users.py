"""Add Role to users

Revision ID: a420447c1ae7
Revises: 6e1e207eeca7
Create Date: 2025-10-27 20:02:45.314775

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a420447c1ae7'
down_revision: Union[str, None] = '6e1e207eeca7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Define the Enum type for clarity and use later
    # Note: SQLite stores Enums as VARCHAR by default, so we define it as such.
    user_role_enum = sa.Enum('ADMIN', 'EDITOR', 'USER', 'GUEST', name='userroleenum')

    with op.batch_alter_table('users', schema=None) as batch_op:

        # 1. ADD THE COLUMN AS NULLABLE=TRUE TEMPORARILY
        # This allows existing rows to temporarily have a NULL value
        batch_op.add_column(sa.Column('role', user_role_enum, nullable=True))

    # 2. UPDATE EXISTING ROWS WITH A DEFAULT VALUE
    # Use op.execute to run a raw SQL update command
    # NOTE: The value here must match one of your Enum values ('USER', 'ADMIN', etc.)
    op.execute("UPDATE users SET role = 'USER' WHERE role IS NULL")

    with op.batch_alter_table('users', schema=None) as batch_op:

        # 3. ALTER THE COLUMN TO SET IT AS NOT NULL
        # Now that all rows have a value, we can enforce the NOT NULL constraint
        batch_op.alter_column('role',
                              existing_type=user_role_enum,
                              nullable=False)

    # ### end Alembic commands ###

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('role')

    # ### end Alembic commands ###
